<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初识Hexo</title>
    <url>/2023/01/09/%E5%88%9D%E8%AF%86Hexo/</url>
    <content><![CDATA[<blockquote>
<p>此前一直想要搭建属于自己的Blog，正好现在趁着大四上寒假空档期就付诸实践了。</p>
<p>在搭建中遇到了许多困难，感谢<a href="https://hexo.io/docs/">Hexo Installation Doc</a> &amp; <a href="https://www.heson10.com/posts/61031.html">Github Action自动部署</a> &amp; <a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a> 等文章的帮助</p>
</blockquote>
<h2 id="搭建基于-Github-和-Github-Action-的Hexo-Blog"><a href="#搭建基于-Github-和-Github-Action-的Hexo-Blog" class="headerlink" title="搭建基于 Github 和 Github Action 的Hexo Blog"></a>搭建基于 Github 和 Github Action 的Hexo Blog</h2><h3 id="一、遵循Hexo-Installation-Doc安装Hexo"><a href="#一、遵循Hexo-Installation-Doc安装Hexo" class="headerlink" title="一、遵循Hexo Installation Doc安装Hexo"></a>一、遵循<a href="https://hexo.io/docs/">Hexo Installation Doc</a>安装Hexo</h3><h4 id="1-1-Install-Hexo"><a href="#1-1-Install-Hexo" class="headerlink" title="1.1 Install Hexo"></a>1.1 Install Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>进行此步骤要求电脑上已经安装了<a href="https://docs.npmjs.com/cli/v8/commands/npm-install">npm</a>。在这一步执行完成后可以看到本目录下出现了如下图的目录结构：</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Intsall%20Hexo.png" alt="Install Hexo后的目录结构"></p>
<h3 id="二、获取Github-Token"><a href="#二、获取Github-Token" class="headerlink" title="二、获取Github Token"></a>二、获取Github Token</h3><h4 id="2-1-进入Github账户设置"><a href="#2-1-进入Github账户设置" class="headerlink" title="2.1 进入Github账户设置"></a>2.1 进入Github账户设置</h4><p>如图,点击你的Github头像,然后选择 <code>Settings</code> ：<br><img src="/../images/Preliminary%20Understanding%20Hexo/Github%20setting.png" alt="Github setting"></p>
<h4 id="2-2-进入Developer-settings"><a href="#2-2-进入Developer-settings" class="headerlink" title="2.2 进入Developer settings"></a>2.2 进入Developer settings</h4><p>进入设置后，拉到底，点击 <code>Developer settings</code></p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Developer%20settings.png" alt="Developer settings"></p>
<h4 id="2-3-生成token"><a href="#2-3-生成token" class="headerlink" title="2.3 生成token"></a>2.3 生成token</h4><p>如图，进入 <code>Developer settings</code> 后，选择 <code>Tokens (classic)</code> </p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Token.png" alt="Tokens (classic)"></p>
<p>如图，然后选择 <code>Generate new token</code> , <code>token</code> 只会在生成时显示，需要将其复制到其他地方先记住</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Generate%20new%20token.png" alt="Generate new token"></p>
<h3 id="三、更改deploy的仓库地址-config-yml"><a href="#三、更改deploy的仓库地址-config-yml" class="headerlink" title="三、更改deploy的仓库地址:_config.yml"></a>三、更改deploy的仓库地址:_config.yml</h3><p>进入刚才安装 <code>Hexo</code> 的目录，找到 <code>_config.yml</code> ,双击打开，并修改 <code>type</code> &amp; <code>repo</code> 如下项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://token@github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>repo</code> 修改示例为：</p>
<p>例如，我的github pages仓库https地址是: <code>https://github.com/SoDebug/SoDebug.github.io.git</code>，那么 <code>repo</code> 就修改为: <code>https://token@github.com/SoDebug/SoDebug.github.io.git</code></p>
<h3 id="四、连接到Github远程仓库（建议私人仓库）"><a href="#四、连接到Github远程仓库（建议私人仓库）" class="headerlink" title="四、连接到Github远程仓库（建议私人仓库）"></a>四、连接到Github远程仓库（建议私人仓库）</h3><p><img src="/../images/Preliminary%20Understanding%20Hexo/Create%20a%20new%20repo.png" alt="Create a new repo"></p>
<p>其中 <code>Repository name</code> 可随意取，但是仓库类型建议选择 <code>Private</code> 以防止自己账户的API泄露</p>
<p>然后就是本地链接到该仓库，命令如下（需要本地已经安装<a href="https://git-scm.com/">git</a>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init    <span class="comment">#仓库初始化</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin <span class="comment">#（私有仓库的地址）(形如：https://github.com/.../.git)</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<p>至此，本地仓库的源码将同步至刚刚新建立的仓库之中（如提交过程中要求输入用户名和密码，输入即可。）<br>仓库同步后的样子大致如下：</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Push%20Resource%20to%20repo.png" alt="Push Resource to repo"></p>
<h3 id="五、开始部署-Github-Action-工作流"><a href="#五、开始部署-Github-Action-工作流" class="headerlink" title="五、开始部署 Github Action 工作流"></a>五、开始部署 Github Action 工作流</h3><p>点击 <code>Action</code> 进入如下图界面：</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Create%20a%20new%20workflow_part1.png" alt="Create a new workflow_part1"></p>
<h4 id="5-1-点击-New-workflow"><a href="#5-1-点击-New-workflow" class="headerlink" title="5.1 点击 New workflow"></a>5.1 点击 <code>New workflow</code></h4><p>进入界面如下</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Choose%20a%20workflow.png" alt="Choose a workflow"></p>
<h4 id="5-2-选择-set-up-a-workflow-yourself"><a href="#5-2-选择-set-up-a-workflow-yourself" class="headerlink" title="5.2 选择 set up a workflow yourself"></a>5.2 选择 <code>set up a workflow yourself</code></h4><p>进入界面如下</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Edit%20new%20workflow.png" alt="Edit new workflow"></p>
<p>将以下代码作相应修改并复制到其中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Deploy # 部署</span><br><span class="line"> </span><br><span class="line">on: # 触发条件</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main # 推送到 main 分支（这里的分支名很重要，不要弄错了）</span><br><span class="line"> </span><br><span class="line">  release:</span><br><span class="line">    types:</span><br><span class="line">      - published # 推送新版本号</span><br><span class="line"> </span><br><span class="line">  workflow_dispatch: # 手动触发</span><br><span class="line"> </span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"> </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout # Checkout 仓库</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line">      with:</span><br><span class="line">        ref: main</span><br><span class="line"> </span><br><span class="line">    - name: Setup Node # 安装 Node.js</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;12.x&quot;</span><br><span class="line"> </span><br><span class="line">    - name: Install Hexo # 安装 Hexo</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">    - name: Cache Modules # 缓存 Node 插件</span><br><span class="line">      uses: actions/cache@v1</span><br><span class="line">      id: cache-modules</span><br><span class="line">      with:</span><br><span class="line">        path: node_modules</span><br><span class="line">        key: $&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span><br><span class="line"> </span><br><span class="line">    - name: Install Dependencies # 如果没有缓存或 插件有更新，则安装插件</span><br><span class="line">      if: steps.cache-modules.outputs.cache-hit != &#x27;true&#x27;</span><br><span class="line">      run: | # **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**</span><br><span class="line">        npm ci</span><br><span class="line">    - name: Generate # 生成</span><br><span class="line">      run: |</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo generate</span><br><span class="line">    - name: Deploy # 部署</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name &quot;username&quot;</span><br><span class="line">        git config --global user.email &quot;xxxxx@example.com&quot;</span><br><span class="line">        git clone 你的Github Pages链接（例如：https://github.com/username/username.github.io.git） .deploy_git</span><br><span class="line">        export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">        hexo deploy</span><br></pre></td></tr></table></figure>

<h4 id="5-3-提交-workflow"><a href="#5-3-提交-workflow" class="headerlink" title="5.3 提交 workflow"></a>5.3 提交 <code>workflow</code></h4><p>依次点击图中的<code>Start Commit</code> &amp; <code>Commit new file</code>来提交workflow</p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Submit%20workflow.png" alt="Submit Workflow"></p>
<h4 id="5-4-检查-Action-运行状况"><a href="#5-4-检查-Action-运行状况" class="headerlink" title="5.4 检查 Action 运行状况"></a>5.4 检查 <code>Action</code> 运行状况</h4><p>返回 <code>Action</code> 界面，查看 <code>Action</code> 是否正常运行，并且没有报错 </p>
<p><img src="/../images/Preliminary%20Understanding%20Hexo/Check%20action%20status.png" alt="Check action status"></p>
]]></content>
  </entry>
</search>
