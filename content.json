{"pages":[{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"初识Hexo","text":"此前一直想要搭建属于自己的Blog，正好现在趁着大四上寒假空档期就付诸实践了。 在搭建中遇到了许多困难，感谢Hexo Installation Doc &amp; Github Action自动部署 &amp; GitHub+Hexo 搭建个人网站详细教程 等文章的帮助 搭建基于 Github 和 Github Action 的Hexo Blog一、遵循Hexo Installation Doc安装Hexo1.1 Install Hexo1$ npm install -g hexo-cli 进行此步骤要求电脑上已经安装了npm。在这一步执行完成后可以看到本目录下出现了如下图的目录结构： 二、获取Github Token2.1 进入Github账户设置如图,点击你的Github头像,然后选择 Settings ： 2.2 进入Developer settings进入设置后，拉到底，点击 Developer settings 2.3 生成token如图，进入 Developer settings 后，选择 Tokens (classic) 如图，然后选择 Generate new token , token 只会在生成时显示，需要将其复制到其他地方先记住 三、更改deploy的仓库地址:_config.yml进入刚才安装 Hexo 的目录，找到 _config.yml ,双击打开，并修改 type &amp; repo 如下项： 123deploy: type: git repo: https://token@github.com/username/username.github.io.git 其中 repo 修改示例为： 例如，我的github pages仓库https地址是: https://github.com/SoDebug/SoDebug.github.io.git，那么 repo 就修改为: https://token@github.com/SoDebug/SoDebug.github.io.git 四、连接到Github远程仓库（建议私人仓库） 其中 Repository name 可随意取，但是仓库类型建议选择 Private 以防止自己账户的API泄露 然后就是本地链接到该仓库，命令如下（需要本地已经安装git）： 123456git init #仓库初始化git add .git commit -m &quot;first commit&quot;git branch -M maingit remote add origin #（私有仓库的地址）(形如：https://github.com/.../.git)git push -u origin main 至此，本地仓库的源码将同步至刚刚新建立的仓库之中（如提交过程中要求输入用户名和密码，输入即可。）仓库同步后的样子大致如下： 五、开始部署 Github Action 工作流点击 Action 进入如下图界面： 5.1 点击 New workflow进入界面如下 5.2 选择 set up a workflow yourself进入界面如下 将以下代码作相应修改并复制到其中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253name: Deploy # 部署 on: # 触发条件 push: branches: - main # 推送到 main 分支（这里的分支名很重要，不要弄错了） release: types: - published # 推送新版本号 workflow_dispatch: # 手动触发 jobs: build: runs-on: ubuntu-latest steps: - name: Checkout # Checkout 仓库 uses: actions/checkout@v2 with: ref: main - name: Setup Node # 安装 Node.js uses: actions/setup-node@v1 with: node-version: &quot;12.x&quot; - name: Install Hexo # 安装 Hexo run: | npm install hexo-cli -g - name: Cache Modules # 缓存 Node 插件 uses: actions/cache@v1 id: cache-modules with: path: node_modules key: ${{runner.OS}}-${{hashFiles('**/package-lock.json')}} - name: Install Dependencies # 如果没有缓存或 插件有更新，则安装插件 if: steps.cache-modules.outputs.cache-hit != 'true' run: | # **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json** npm ci - name: Generate # 生成 run: | hexo clean hexo generate - name: Deploy # 部署 run: | git config --global user.name &quot;username&quot; git config --global user.email &quot;xxxxx@example.com&quot; git clone 你的Github Pages链接（例如：https://github.com/username/username.github.io.git） .deploy_git export TZ='Asia/Shanghai' hexo deploy 5.3 提交 workflow依次点击图中的Start Commit &amp; Commit new file来提交workflow 5.4 检查 Action 运行状况返回 Action 界面，查看 Action 是否正常运行，并且没有报错","link":"/2023/01/09/%E5%88%9D%E8%AF%86Hexo/"}],"tags":[],"categories":[]}